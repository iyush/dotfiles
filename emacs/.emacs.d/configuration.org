TITLE: Emacs Configuration
#+AUTHOR: Aayush Acharya
#+STARTUP: indent hidestars
** Essential Packages
I am using =use-packages= for managing all the packages. This is my first time using it.
*** Show parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode +1)
#+END_SRC
*** Auto paren close using electric-pair-mode
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC
*** Blink Cursor disable
#+BEGIN_SRC emacs-lisp
;; (blink-cursor-mode -1)
#+END_SRC
*** PDF tools-install
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:ensure t
:config
    (progn
        (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
        (add-hook 'pdf-view-mode-hook (blink-cursor-mode -1))
        (pdf-tools-install)
    )
)
#+END_SRC
*** Try
Try enables me to demo quick emacs packages without the need to install one.
#+BEGIN_SRC emacs-lisp
(use-package try
:ensure t)
#+END_SRC
*** which-key
Which-key to lookup for follow-up keys
#+BEGIN_SRC emacs-lisp
   (use-package which-key
   :ensure t
   :config (which-key-mode))
#+END_SRC
*** auto-complete
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-complete
  ;; :ensure t
  ;; :init
  ;; (progn
  ;; (ac-config-default)
  ;; (global-auto-complete-mode t)))
#+END_SRC
*** Load Nepali keyboard layout
नेपाली कीबोर्ड चालुको लागी ‍=<C-\>= दाब्ने।
#+BEGIN_SRC emacs-lisp
    (load "~/.emacs.d/lisp/nepali-romanized.el")
#+END_SRC
*** Emacs kill confirmation
#+BEGIN_SRC emacs-lisp :asd 
        (setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC
*** Ranger
My favourite file browser
#+BEGIN_SRC emacs-lisp
(use-package ranger
:ensure t
:config
(global-set-key (kbd "C-x d") 'ranger)
)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
)
#+END_SRC
** Emacs Auto Save and Backups
I do not want emacs clogging up my directories with auto save and backup files. I also do not want to disable the feature outright, but I do want to move it somewhere else.
The best place to move those would be to =~/.emacs.d/auto-save= for auto save files and =~/.emacs.d/backups= for backup files.
#+BEGIN_SRC emacs-lisp
        (setq auto-save-file-name-transforms
            `((".*" ,(concat user-emacs-directory "auto-save-list/") t)))
        (setq backup-directory-alist
            `(("." . ,(expand-file-name
                        (concat user-emacs-directory "backups")))))
#+END_SRC
** Key Shortcuts
*** EVIL
I use evil mode because of I am afraid of RSI, plus I come from vim so its natural and it is efiencient for me.
I also remap my =j= to =gj= and =k= to =gk= in vim sense, so I move up and down in terms of visual line and not actual lines.
#+BEGIN_SRC emacs-lisp
  (use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line))
#+END_SRC
*** IVY, SWIPER AND COUNSEL
IVY keybindings for =M-x= (launcher), finding files, buffer list. Swiper as =i-search= replacement and counsel for (i dont know) 
#+BEGIN_SRC emacs-lisp
(use-package ivy
:ensure t)
(use-package counsel
:ensure t)
(use-package swiper
:ensure t
:config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper-isearch)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
)
#+END_SRC
*** Resize windows
Using simpler windows resize bindings =<space-ctrl-directionArrows>= than the default k-eybindings.
#+BEGIN_SRC emacs-lisp
        (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
        (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
        (global-set-key (kbd "s-C-<down>") 'shrink-window)
        (global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+END_SRC

*** Configuration file
Open configuration file using quick keyboard bindings
#+BEGIN_SRC emacs-lisp
        (defun asa/open-config ()
        (interactive)
        (find-file "~/.emacs.d/configuration.org"))
        (global-set-key (kbd "C-x c") 'asa/open-config)
#+END_SRC
** Small Packages
** Visuals
*** Highlight Indentations
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
:ensure t
:config
(highlight-indent-guides-mode t)
(setq highlight-indent-guides-method 'character))
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
#+END_SRC
*** Dont want the start up messages and the banner so hide them.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC
*** Conservative Scrolling
When point goes outside the window, Emacs usually recenters the buffer point. I’m not crazy about that. This changes scrolling behavior to only scroll as far as point goes.
#+BEGIN_SRC emacs-lisp
        (setq scroll-conservatively 100)
#+END_SRC
*** No tool bars, no menu bars and no scroll bars.
#+BEGIN_SRC emacs-lisp
        (tool-bar-mode -1)
        (menu-bar-mode -1)
        (scroll-bar-mode -1)
#+END_SRC
*** Remove unnecessary audio bells, add visual flash instead (could remove it in future)
#+BEGIN_SRC emacs-lisp
        ;(setq-default visible-bell t)
        (setq ring-bell-function 'ignore)
#+END_SRC
*** By default display line numbers on all buffers. Works only on =emacs>26.0=
#+BEGIN_SRC emacs-lisp
  ;; (if (version< emacs-version "26")
  ;; (eval (message "Cannot enable global-display-line-numbers-mode emacs version less than 26.0")
  ;;       (global-linum-mode 1))
  ;; (global-display-line-numbers-mode 1))
#+END_SRC
*** Change Line spacing
By default change line spacing to 0.1 . 0.1 does not do anything, I sometimes change it to 0.5 .
#+BEGIN_SRC emacs-lisp
        (setq-default line-spacing 0.1)
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(default ((t (:family "Source Code Pro Regular" :slant normal :weight bold :height 110 :width normal))))
)
#+END_SRC
*** Theme
Light theme (solarized-theme-light) and dark theme (solarized-theme-dark) according to time of the day (9 - 18 light and otherwise dark)
Functions for enabling light theme or dark theme or theme-according to the time of the day
#+BEGIN_SRC emacs-lisp
(defun asa/dark-theme()
    (interactive)
    (use-package atom-one-dark-theme
        :ensure t
        :config
        (disable-theme 'solarized-light)
        (load-theme 'atom-one-dark t)
    )
)
(defun asa/light-theme ()
    (interactive)
    (use-package solarized-theme
        :ensure t
        :config
        (disable-theme 'atom-dark-theme)
        (load-theme 'solarized-light t)
    )
)
(defun asa/time-theme () 
    (interactive)
    (if (and (< (string-to-number (format-time-string "%-H")) 22) (> (string-to-number (format-time-string "%-H")) 9))
        (asa/light-theme)
        (asa/dark-theme)
    )
)
#+END_SRC
Activate the following theme
#+BEGIN_SRC emacs-lisp
; (asa/dark-theme)
(load-theme 'wheatgrass)
#+END_SRC
*** Powerline
Better mode line (Commented breaks portability)
#+BEGIN_SRC emacs-lisp
;(use-package powerline-evil                ;;Install powerline-evil
    ;:ensure t)
;(use-package airline-themes
;:ensure t)
;(use-package powerline
    ;:ensure t
    ;:config 
    ;(airline-themes-set-modeline)
    ;(load-theme 'airline-dark t)
;)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
;;	(helm-external-programs-associations '(("pdf" . "evince")))
#+END_SRC
** Web Mode
Web mode for php, blade and html files
#+BEGIN_SRC emacs-lisp
(use-package web-mode
:ensure t
:config
        (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
        (setq web-mode-engines-alist
            '(("php"    . "\\.phtml\\'")
            ("blade"  . "\\.blade\\.")
            ("html"   . "\\.html\\.")))
            (add-hook 'web-mode-hook ; or whatever the mode-hook is for your mode of choice
            (lambda ()
                (flymake-eslint-enable)))
)
#+END_SRC
** Org
[[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Copied from]]
*** Ox-koma-letter
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")
(eval-after-load 'ox '(require 'ox-koma-letter))
(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("my-letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[english]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "my-letter")))

(eval-after-load 'ox-latex
  '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))
#+END_SRC
*** Custom variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
     '(org-directory "~/Sync/orgfiles")
     '(org-default-notes-file (concat org-directory "/notes.org"))
     '(org-export-html-postamble nil)
     '(org-hide-leading-stars t)
     '(org-startup-indented t)
     '(org-confirm-babel-evaluate nil)
     '(org-src-fontify-natively t)
     )
#+END_SRC
*** Open pdf in evince (requires evince)
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      (append '(
               ("\\.pdf\\'". "evince %s")
               ) org-file-apps))
#+END_SRC
*** Org inline Images Size
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC
*** Disable Line Number for org-mode
#+BEGIN_SRC emacs-lisp
;(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1) )
(if (fboundp 'display-line-numbers-mode)
        (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1) ))
(add-hook 'org-mode-hook (lambda () (linum-mode -1)))
)


#+END_SRC
*** Change ... to arrows
#+BEGIN_SRC emacs-lisp
   (setq org-ellipsis "⤵")
#+END_SRC
*** Configure faces for Org headlines and lists
First, we ask org-mode to hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.):
#+BEGIN_SRC emacs-lisp
    (setq org-hide-emphasis-markers t)
#+END_SRC

(Removed for now as breaks portability)
The org-bullets package replaces all headline markers with different Unicode bullets
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-bullets
  ;; :config
  ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** Use long lines and visual-line-mode
With =visual-line-mode= enabled, long lines will flow and adjust to the width of the window.
#+BEGIN_SRC emacs-lisp
            (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
** Projectile
(Commented for as it breaks portability)
#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile
  ;; :config
  ;; (projectile-mode +1)
  ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  ;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** Flycheck
(Commented as it breaks portability)
#+BEGIN_SRC emacs-lisp
  ;; (use-package flycheck
  ;; :config
  ;; (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
** AucTex
#+BEGIN_SRC emacs-lisp
        (setq TeX-parse-self t)
        (setq TeX-auto-save t)
        (setq TeX-PDF-mode t)
#+END_SRC
** Other Custom files
#+BEGIN_SRC emacs-lisp
        (setq custom-file "~/.emacs.d/custom.el")
        (load custom-file)
#+END_SRC
** Company Mode
*** Initialization
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0)                       ;; Optional options
(setq comapny-minimum-prefix-length 3))
(with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n" ) nil )
    (define-key company-active-map (kbd "M-p" ) nil )
    (define-key company-active-map (kbd "C-n" ) #'company-select-next)
    (define-key company-active-map (kbd "C-p" ) #'company-select-previous)
)
#+END_SRC
*** Irony for C++, C and Objective-C
#+BEGIN_SRC emacs-lisp
(use-package irony
:ensure t
:config
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package company-irony
:ensure t
:config
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
)

(use-package company-irony-c-headers
:ensure t
:config 
(eval-after-load 'company
     '(add-to-list
       'company-backends '(company-irony-c-headers company-irony)))
)
#+END_SRC
** Javascript for Emacs
*** Setting up js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:config
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; Better imenu
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode))
#+END_SRC
*** js2-refactor and xref-js2
js2-refactor adds powerful refactorings based on the AST generated by js2-mode, and xref-js2 makes it easy to jump to function references or definitions. xref-js2 uses ag to perform searches, so you’ll need to install it as well.

#+BEGIN_SRC emacs-lisp
( use-package js2-refactor
:ensure t
:config
(add-hook 'js2-mode-hook #'js2-refactor-mode)
(js2r-add-keybindings-with-prefix "C-c C-r")
(define-key js2-mode-map (kbd "C-k") #'js2r-kill)
;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
;; unbind it.
(define-key js-mode-map (kbd "M-.") nil)
(add-hook 'js2-mode-hook (lambda ()
  (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
#+END_SRC
*** Using js2-refactor
js2-refactor is a JavaScript refactoring library for emacs. It provides a collection of refactoring functions leveraging the AST provided by js2-mode. Refactorings go from inlining/extracting variables to converting ternary operators to if statements. The README provides the full list of keybindings. One minor tweak that I really couldn’t live without is binding js2r-kill to C-k in JS buffers: 
=(define-key js2-mode-map (kbd "C-k") #'js2r-kill)=
This command is very similar to killing in paredit: It kills up to the end of the line, but always keeping the AST valid. Here’s a usage example of js2-refactor: renaming a function parameter and inlining a variable.
*** Using xref-js2
xref-js2 adds support for quickly jumping to function definitions or references to JavaScript projects in Emacs (>= 25.1). Instead of using a tag system, it relies on ag to query the codebase of a project.
- =M-.= Jump to definition
- =M-?= Jump to references
- =M-,= Pop back to where M-. was last invoked
*** Setting up Tern & company-mode for auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company-tern
  :ensure t
  :config
  (add-to-list 'company-backends 'company-tern)
  (add-hook 'js2-mode-hook (lambda ()
                             (tern-mode)))

  ;; Disable completion keybindings, as we use xref-js2 instead
  ;; (define-key tern-mode-keymap (kbd "M-.") nil)
  ;; (define-key tern-mode-keymap (kbd "M-,") nil)
)
#+END_SRC
** Python IDE, Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
:ensure t
:init
(advice-add 'python-mode :before 'elpy-enable)
:config
(setq python-shell-interpreter "python"
      python-shell-interpreter-args "-i")
)
#+END_SRC
